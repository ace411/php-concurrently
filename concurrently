#! /usr/bin/env php
<?php

/**
 * Library .bin file
 * primary executable script file $ concurrently [options] [arguments]
 * 
 * @author Lochemem Bruno Michael
 * @license Apache-2.0
 */

foreach (
	[
		__DIR__ . '/../autoload.php',
		__DIR__ . '/../../autoload.php',
		__DIR__ . '/../vendor/autoload.php',
		__DIR__ . '/vendor/autoload.php',
		__DIR__ . '/../../vendor/autoload.php',
	] as $file
) {
  if (\file_exists($file)) {
    \define('AUTOLOAD_PHP_FILE', $file);
    break;
  }
}
if (!\defined('AUTOLOAD_PHP_FILE')) {
  \fwrite(STDERR,
		'You need to set up the project dependencies using the following commands:' . PHP_EOL .
		'wget http://getcomposer.org/composer.phar' . PHP_EOL .
		'php composer.phar install' . PHP_EOL
	);
  die(1);
}
require AUTOLOAD_PHP_FILE;

use React\EventLoop\Factory;
use Rx\Scheduler;
use Chemem\{
	Concurrently\Console as c,
	Bingo\Functional\Algorithms as f,
	Bingo\Functional\Functors\Monads\IO,
};

// terminate process if it is running outside a console environment
if (PHP_SAPI !== 'cli') {
  IO\putStr('Sorry, php-concurrently only runs in a console environment')
		->map(function ($_) {
		  exit();
		})
		->exec();
}

// set general exception handler
\set_exception_handler(function ($_) {
  return IO\putStr('Sorry, an error occurred')->exec();
});

// convert script arguments to parsable string
$args = \implode(' ', f\dropLeft($argv, 1));

$loop = Factory::create();

Scheduler::setDefaultFactory(function () use ($loop) {
  return new Scheduler\EventLoopScheduler($loop);
});

$console = c\parse($loop, $args)->exec();

$loop->run();
